<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. --><project basedir="." default="build" name="HomeAudioSystem">
    <property environment="env"/>
    <!-- The next line should be modified with the path of your computer-->
  	<property name="ECLIPSE_HOME" value="../../../../Eclipse Luna x64 java/" />
    <property name="junit.output.dir" value="junit"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.7"/>
    <property name="source" value="1.7"/>
    <path id="JUnit 4.libraryclasspath">
    	<!-- The next tow lines should be modified with the path of your computer-->
        <pathelement location="${ECLIPSE_HOME}plugins/org.junit_4.11.0.v201303080030/junit.jar"/>
        <pathelement location="${ECLIPSE_HOME}plugins/org.hamcrest.core_1.3.0.v201303031735.jar"/>
    </path>
    <path id="HomeAudioSystem.classpath">
        <pathelement location="bin"/>
        <path refid="JUnit 4.libraryclasspath"/>
        <pathelement location="lib/jdatepicker-1.3.4.jar"/>
        <pathelement location="lib/xmlpull-1.1.3.1.jar"/>
        <pathelement location="lib/xpp3_min-1.1.4c.jar"/>
        <pathelement location="lib/xstream-1.4.7.jar"/>
    </path>
    
  	<!-- The init target has been generated-->	
    <target name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="src">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="test">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
              	
    <!-- Clean targer erases bin and junit folders-->          	
    <target name="clean">
        <delete dir="bin"/>
    	<delete dir="junit" />
    </target>
    <target depends="clean" name="cleanall"/>
    
              	
   	<!-- The build target has been generated-->
    <target depends="build-subprojects,build-project" name="build"/>
    <target name="build-subprojects"/>
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" includeantruntime="false" source="${source}" target="${target}">
            <src path="src"/>
            <src path="test"/>
            <classpath refid="HomeAudioSystem.classpath"/>
        </javac>
    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
    <target description="copy Eclipse compiler jars to ant lib directory" name="init-eclipse-compiler">
        <copy todir="${ant.library.dir}">
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </copy>
        <unzip dest="${ant.library.dir}">
            <patternset includes="jdtCompilerAdapter.jar"/>
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </unzip>
    </target>
    <target description="compile project with Eclipse compiler" name="build-eclipse-compiler">
        <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
        <antcall target="build"/>
    </target>
              	
  	<!-- The exportjar target has been written manually -->
	<!-- modified version of the one given in the tutorials-->
	<target name="exportjar" depends="build" description="Create a jar for the project">
		<mkdir dir="bin/jar" />
		<jar destfile="bin/jar/HomeAudioSystem.jar" basedir="bin">
			<manifest>
				<attribute name="Main-Class" value="application.CompApp" />
			</manifest>
		</jar>
	</target>
    
              	
    <!-- The following targets are for testing -->
    <target name="AllTests" depends="build">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="ca.mcgill.ecse321.HomeAudioSystem.AllTests" todir="${junit.output.dir}"/>
            <classpath refid="HomeAudioSystem.classpath"/>
        </junit>
    	
    	<junitreport todir="${junit.output.dir}">
    				<fileset dir="${junit.output.dir}">
    					<include name="TEST-*.xml" />
    				</fileset>
    				<report format="frames" todir="${junit.output.dir}" />
    			</junitreport>
    </target>    
              	
    <target name="TestHomeAudioSystemController" depends="build">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="ca.mcgill.ecse321.HomeAudioSystem.controller.TestHomeAudioSystemController" todir="${junit.output.dir}"/>
            <classpath refid="HomeAudioSystem.classpath"/>
        </junit>
    	
    	<junitreport todir="${junit.output.dir}">
    				<fileset dir="${junit.output.dir}">
    					<include name="TEST-*.xml" />
    				</fileset>
    				<report format="frames" todir="${junit.output.dir}" />
    			</junitreport>
    </target>
              	
    <target name="TestPersistence" depends="build">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="ca.mcgill.ecse321.HomeAudioSystem.persistence.TestPersistence" todir="${junit.output.dir}"/>
            <classpath refid="HomeAudioSystem.classpath"/>
        </junit>
    	
    	<junitreport todir="${junit.output.dir}">
    				<fileset dir="${junit.output.dir}">
    					<include name="TEST-*.xml" />
    				</fileset>
    				<report format="frames" todir="${junit.output.dir}" />
    			</junitreport>
    </target>
              	
  	<!-- Target to run application-->
  	    <target name="RunHAS-java" depends="build">
  	        <java classname="ca.mcgill.ecse321.HomeAudioSystem.application.HomeAudioSystem" failonerror="true" fork="yes">
  	            <classpath refid="HomeAudioSystem.classpath"/>
  	        </java>
  	    </target>
</project>
